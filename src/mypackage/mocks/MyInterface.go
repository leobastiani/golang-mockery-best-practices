// Code generated by mockery v2.38.0. DO NOT EDIT.

package mypackage_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MyInterface is an autogenerated mock type for the MyInterface type
type MyInterface[T interface{}] struct {
	mock.Mock
}

type MyInterface_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MyInterface[T]) EXPECT() *MyInterface_Expecter[T] {
	return &MyInterface_Expecter[T]{mock: &_m.Mock}
}

// MyMethod provides a mock function with given fields: _a0, _a1
func (_m *MyInterface[T]) MyMethod(_a0 context.Context, _a1 T) (int, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for MyMethod")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T) (int, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, T) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyInterface_MyMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MyMethod'
type MyInterface_MyMethod_Call[T interface{}] struct {
	*mock.Call
}

// MyMethod is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 T
func (_e *MyInterface_Expecter[T]) MyMethod(_a0 interface{}, _a1 interface{}) *MyInterface_MyMethod_Call[T] {
	return &MyInterface_MyMethod_Call[T]{Call: _e.mock.On("MyMethod", _a0, _a1)}
}

func (_c *MyInterface_MyMethod_Call[T]) Run(run func(_a0 context.Context, _a1 T)) *MyInterface_MyMethod_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *MyInterface_MyMethod_Call[T]) Return(_a0 int, _a1 error) *MyInterface_MyMethod_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MyInterface_MyMethod_Call[T]) RunAndReturn(run func(context.Context, T) (int, error)) *MyInterface_MyMethod_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMyInterface creates a new instance of MyInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMyInterface[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MyInterface[T] {
	mock := &MyInterface[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
